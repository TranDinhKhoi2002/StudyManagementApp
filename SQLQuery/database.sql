CREATE DATABASE StudyManagementApp
GO

USE StudyManagementApp
GO

CREATE TABLE ACCOUNT
(
	USERNAME VARCHAR(100) PRIMARY KEY,
	PASSWORD VARCHAR(100)
)
GO

ALTER TABLE ACCOUNT ADD EMAIL VARCHAR(100)
GO

-- User Configuration Record
CREATE TABLE USERCONFIG
(
	ID INT IDENTITY(1, 1) PRIMARY KEY,
	USERNAME VARCHAR(100),
	THEME BIT,
	BACKGROUND_RUNNING_ENABLE BIT,
	STARTUP_ENABLE BIT
)
GO

ALTER TABLE USERCONFIG ADD CONSTRAINT FK_USERCONFIG FOREIGN KEY (USERNAME) REFERENCES ACCOUNT(USERNAME)
GO

CREATE PROC USP_Login
@userName NVARCHAR(100), @passWord NVARCHAR(100)
AS
BEGIN
	SELECT * FROM ACCOUNT WHERE USERNAME = @userName AND PASSWORD = @passWord
END
GO

CREATE PROC USP_Signup
@userName NVARCHAR(100), @passWord NVARCHAR(100), @email VARCHAR(100)
AS
BEGIN
	INSERT INTO ACCOUNT(USERNAME, PASSWORD, EMAIL) VALUES (@userName, @passWord, @email)
END
GO

CREATE PROC USP_ChangePassword
@username NVARCHAR(100), @newPassowrd NVARCHAR(100)
AS
BEGIN
	UPDATE ACCOUNT
	SET PASSWORD=@newPassowrd
	WHERE USERNAME=@username
END
GO

CREATE PROC USP_VerifyUserExist
@userName NVARCHAR(100)
AS
BEGIN
	SELECT USERNAME FROM ACCOUNT WHERE USERNAME = @userName
END
GO

CREATE PROC USP_VerifyEmailExist
@email VARCHAR(100)
AS
BEGIN
	SELECT * FROM ACCOUNT WHERE EMAIL = @email
END
GO

CREATE PROC USP_EmailOfEachUser
@userName VARCHAR(100), @email VARCHAR(100)
AS
BEGIN
	SELECT * FROM ACCOUNT WHERE USERNAME = @userName AND EMAIL = @email
END
GO

-- USERCONFIG'S PROCEDURE
CREATE PROC InsertUserConfig
@username VARCHAR(100), @theme bit, @background bit, @startup bit
AS
BEGIN
	INSERT INTO USERCONFIG(USERNAME, THEME, BACKGROUND_RUNNING_ENABLE, STARTUP_ENABLE)
		VALUES (@username, @theme, @background, @startup)
END
GO

CREATE PROC GetUserConfig
@username VARCHAR(100)
AS
BEGIN
	SELECT *
	FROM USERCONFIG
	WHERE USERNAME=@username
END
GO

CREATE PROC UpdateUserConfig
@username VARCHAR(100), @theme bit, @background bit, @startup bit
AS
BEGIN
	UPDATE USERCONFIG
	SET THEME=@theme, BACKGROUND_RUNNING_ENABLE=@background, STARTUP_ENABLE=@startup
	WHERE USERNAME=@username
END
GO

CREATE TRIGGER TRG_ACCOUNT_INS ON ACCOUNT
FOR INSERT
AS
BEGIN
	DECLARE @username VARCHAR(100)

	SELECT @username=USERNAME
	FROM INSERTED

	EXEC InsertUserConfig @username, 'false', 'false', 'false'
END
GO

--CREATE PROC USP_GetAccountByUserName
--@userName NVARCHAR(100)
--AS
--BEGIN
--	SELECT * FROM ACCOUNT WHERE USERNAME = @userName
--END
--GO

--EXEC USP_GetAccountByUserName @userName = N'staff'

--SELECT * FROM ACCOUNT WHERE USERNAME = 'staff' AND PASSWORD = '123'
--GO
CREATE TABLE DECK
(
	ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	NAME NVARCHAR(255),
	USERNAME VARCHAR(100)
)
GO

ALTER TABLE DECK ADD CONSTRAINT FK_DECK_USERNAME FOREIGN KEY (USERNAME) REFERENCES ACCOUNT(USERNAME)
GO

CREATE TABLE FLASHCARD
(
	ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	DECKID INT,
	WORD NVARCHAR(255),
	DEFINITION NVARCHAR(255),
	DESCRIPTION NVARCHAR(2048)
)
GO

ALTER TABLE FLASHCARD ADD CONSTRAINT FK_FLASHCARD_DECKID FOREIGN KEY (DECKID) REFERENCES DECK(ID)
GO

CREATE PROCEDURE GetDecks
@username VARCHAR(100)
AS
BEGIN
	SELECT DECK.ID, DECK.NAME, COUNT(FLASHCARD.ID) AS 'Number Of FlashCard'
	FROM DECK LEFT JOIN FLASHCARD ON DECK.ID=FLASHCARD.DECKID
	WHERE 
		USERNAME=@username
	GROUP BY DECK.ID, DECK.NAME
END
GO

CREATE PROCEDURE GetFlashCards
@deckID INT
AS
BEGIN
	SELECT ID, WORD, DEFINITION, DESCRIPTION FROM FLASHCARD WHERE DECKID=@deckID
END
GO

CREATE PROCEDURE InsertDeck
@username VARCHAR(100), @name NVARCHAR(255)
AS
BEGIN
	INSERT INTO DECK(USERNAME, NAME) VALUES (@username, @name)
END
GO

CREATE PROCEDURE DeleteDeck
@deckID INT
AS
BEGIN
	DELETE FROM FLASHCARD WHERE DECKID=@deckID
	DELETE FROM DECK WHERE ID=@deckID
END
GO

CREATE PROCEDURE UpdateDeck
@deckID INT, @name NVARCHAR(255)
AS
BEGIN
	UPDATE DECK
	SET NAME=@name
	WHERE ID=@deckID
END
GO

CREATE PROCEDURE InsertFlashCard
@deckID INT, @word NVARCHAR(255), @definition NVARCHAR(255), @description NVARCHAR(2048)
AS
BEGIN
	INSERT INTO FLASHCARD(DECKID, WORD, DEFINITION, DESCRIPTION) VALUES (@deckID, @word, @definition, @description)
END
GO

CREATE PROCEDURE DeleteFlashCard
@id INT
AS
BEGIN
	DELETE FROM FLASHCARD WHERE ID=@id
END
GO

CREATE PROCEDURE UpdateFlashCard
@id INT,@deckID INT, @word NVARCHAR(255), @definition NVARCHAR(255), @description NVARCHAR(2048)
AS
BEGIN
	UPDATE FLASHCARD
	SET DECKID=@deckID, WORD=@word, DEFINITION=@definition, DESCRIPTION=@description
	WHERE ID=@id
END
GO

CREATE TRIGGER INS_DECK_NAME ON DECK
FOR INSERT, UPDATE
AS
BEGIN
	IF EXISTS (SELECT * FROM INSERTED I, DECK WHERE I.NAME=DECK.NAME AND I.USERNAME=DECK.USERNAME AND I.ID!=DECK.ID)
	BEGIN
		ROLLBACK TRAN
	END
END
GO

Go

CREATE TABLE NOTES
(
	PK_NOTES VARCHAR(100),
	USERNAME VARCHAR(100),
	DATETIMECREATE DATETIME,
	TITLE NVARCHAR(50),
	CONTENT NVARCHAR(1000),
	COLOR_ID VARCHAR(7)

	CONSTRAINT PKey_NOTES PRIMARY KEY (PK_NOTES)
)
Go

ALTER TABLE NOTES ADD CONSTRAINT FK_NOTES_ACCOUNT FOREIGN KEY (USERNAME) REFERENCES ACCOUNT(USERNAME);
Go

CREATE PROC ADD_NOTEITEM
	@pk_Notes VARCHAR(100),
	@userName NVARCHAR(100),
	@datetimeCreate DATETIME,
	@title NVARCHAR(50),
	@content NVARCHAR(1000),
	@color_id VARCHAR(7)
AS
BEGIN
	INSERT INTO NOTES VALUES (@pk_Notes , @userName , @datetimeCreate , @title , @content , @color_id )
END
GO

CREATE PROC LOAD_ALLNOTEITEM
@userName NVARCHAR(100)
AS
BEGIN
	SELECT * FROM NOTES WHERE USERNAME = @userName ORDER BY DATETIMECREATE;
END
GO

CREATE PROC UPDATE_NOTEITEM
@pk_notes VARCHAR(100), @title NVARCHAR(50), @content NVARCHAR(1000), @color_id VARCHAR(7)
AS
BEGIN
	UPDATE NOTES
	SET TITLE = @title, CONTENT = @content, COLOR_ID = @color_id
	WHERE PK_NOTES = @pk_notes
END
GO

CREATE PROC DELETE_NOTEITEM
@pk_notes VARCHAR(100)
AS
BEGIN
	DELETE FROM NOTES
	WHERE PK_NOTES = @pk_notes
END
GO

go

CREATE TABLE TASK(
	USERNAME VARCHAR(100),
	DATETIMECREATE DATETIME,
	

	TASKNAME NVARCHAR(50),
	DATETIMEDEADLINE DATETIME,
	NOTE NVARCHAR(1000),
	DONE BIT,
	PK_COLOR NVARCHAR(100),
	DATETIMENOTI DATETIME,
	PRIMARY KEY(USERNAME,DATETIMECREATE)
)
GO

CREATE TABLE TYPEITEM(
	PK_COLOR NVARCHAR(100),
	USERNAME VARCHAR(100),
	TYPECOLOR NVARCHAR(15),
	NAMETYPE NVARCHAR(50),

	PRIMARY KEY(PK_COLOR)
)
GO

ALTER TABLE TASK ADD CONSTRAINT FK_TASK_USERNAME FOREIGN KEY (USERNAME) REFERENCES ACCOUNT(USERNAME)
GO
ALTER TABLE TASK ADD CONSTRAINT FK_TASK_PK_COLOR FOREIGN KEY (PK_COLOR) REFERENCES TYPEITEM(PK_COLOR)
GO
ALTER TABLE TYPEITEM ADD CONSTRAINT FK_TYPEITEM_USERNAME FOREIGN KEY (USERNAME) REFERENCES ACCOUNT(USERNAME)
GO

---------------------------------------------------------
--Them item cho user
CREATE PROC ADD_ITEM
	@userName NVARCHAR(100),
	@datetimeCREATE DATETIME,
	@taskNAME NVARCHAR(50),
	@datetimeDEADLINE DATETIME,
	@note NVARCHAR(1000),
	@done BIT,
	@pk_COLOR NVARCHAR(100),
	@datetimeNOTI DATETIME
AS
BEGIN
	INSERT INTO TASK VALUES (
	@userName,
	@datetimeCREATE ,
	@taskNAME ,
	@datetimeDEADLINE ,
	@note ,
	@done ,
	@pk_COLOR ,
	@datetimeNOTI )
END
GO


--Load toan bo item cua mot user
CREATE PROC LOAD_ALLITEM
@userName NVARCHAR(100)
AS
BEGIN
	SELECT * FROM TASK WHERE USERNAME = @userName
END
GO

--Update check item cua mot user
CREATE PROC UPDATE_CHECK
@userName NVARCHAR(100), @datetimeCreate DATETIME, @done BIT
AS
BEGIN
	UPDATE TASK
	SET DONE=@done
	WHERE USERNAME=@username AND DATETIMECREATE = @datetimeCREATE
END
GO

--Update taskname của item cua mot user
CREATE PROC UPDATE_TASKNAME
@userName NVARCHAR(100), @datetimeCreate DATETIME, @taskNAME NVARCHAR(50)
AS
BEGIN
	UPDATE TASK
	SET TASKNAME = @taskNAME
	WHERE USERNAME=@username AND DATETIMECREATE = @datetimeCREATE
END
GO

--Update note/description của item cua mot user
CREATE PROC UPDATE_DESCRIPTION
@userName NVARCHAR(100), @datetimeCreate DATETIME, @note NVARCHAR(1000)
AS
BEGIN
	UPDATE TASK
	SET NOTE = @note
	WHERE USERNAME=@username AND DATETIMECREATE = @datetimeCREATE
END
GO

--Update datetime NOTI
CREATE PROC UPDATE_DATETIMENOTI
@userName NVARCHAR(100), @datetimeCreate DATETIME, @datetimeNOTI DATETIME
AS
BEGIN
	UPDATE TASK
	SET DATETIMENOTI = @datetimeNOTI
	WHERE USERNAME=@username AND DATETIMECREATE = @datetimeCREATE
END
GO

--Delete mot item cua mot user
CREATE PROC DELETE_MOT_ITEM
@userName NVARCHAR(100), @datetimeCreate DATETIME
AS
BEGIN
	DELETE FROM TASK
	WHERE USERNAME=@username AND DATETIMECREATE = @datetimeCREATE
END
GO

----------------------------------------------------
--Them data TYPEITEM
CREATE PROC ADD_COLORITEM
	@pk_COLOR NVARCHAR(100),
	@userName NVARCHAR(100),
	@typeCOLOR NVARCHAR(15),
	@nameTYPE NVARCHAR(50)
AS
BEGIN
	INSERT INTO TYPEITEM VALUES (
	@pk_COLOR ,
	@userName,
	@typeCOLOR ,
	@nameTYPE)
END
GO

--Load tat ca mau user
CREATE PROC LOAD_ALL_COLORITEM
@userName VARCHAR(100)
AS
BEGIN
	SELECT * FROM TYPEITEM WHERE USERNAME = @userName
END
GO

CREATE PROC UPDATE_TYPEITEM
	@pk_COLOR NVARCHAR(100),
	@userName NVARCHAR(100),
	@typeCOLOR NVARCHAR(15),
	@nameTYPE NVARCHAR(50)
AS
BEGIN
	UPDATE TYPEITEM
	SET TYPECOLOR = @typeCOLOR, NAMETYPE = @nameTYPE
	WHERE PK_COLOR = @pk_COLOR AND USERNAME= @userName
END
GO

CREATE PROC DELETE_TYPEITEM
	@pk_COLOR NVARCHAR(100),
	@userName NVARCHAR(100)
AS
BEGIN
	DELETE FROM TYPEITEM
	WHERE PK_COLOR = @pk_COLOR AND USERNAME = @userName
END
GO
